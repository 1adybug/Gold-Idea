generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Question {
  id              Int           @id @default(autoincrement())
  content         String
  goal            String        @default("")
  publisherId     Int
  publisher       User          @relation("PublishQuestions", fields: [publisherId], references: [id])
  comments        Comment[]
  collections     Collections[]
  attentions      Attentions[]
  createTime      DateTime      @default(now())
  updateTime      DateTime      @default(now()) @updatedAt
  deleted         Boolean       @default(false)
  deletedByUserId Int?          
  deletedBy       User?         @relation("DeleteQuestions", fields: [deletedByUserId], references: [id])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  publisherId Int
  publisher   User     @relation(fields: [publisherId], references: [id])
  questionId  Int
  question    Question @relation(fields: [questionId], references: [id])
  reply       Reply?
  createTime  DateTime @default(now())
  updateTime  DateTime @default(now()) @updatedAt
}

model Reply {
  id          Int      @id @default(autoincrement())
  content     String
  publisherId Int
  publisher   User     @relation(fields: [publisherId], references: [id])
  commentId   Int?     @unique
  comment     Comment? @relation(fields: [commentId], references: [id])
  createTime  DateTime @default(now())
  updateTime  DateTime @default(now()) @updatedAt
}

model User {
  id              Int           @id @default(autoincrement())
  avator          String?
  userName        String
  policeNo        String
  phone           String
  Question        Question[]    @relation("PublishQuestions")
  comments        Comment[]
  collections     Collections[]
  attentions      Attentions[]
  replies         Reply[]
  unitId          Int
  unit            Unit?
  deleteQuestions Question[]    @relation("DeleteQuestions")
}

model Unit {
  unitId     Int      @id @default(autoincrement())
  unitNo     String
  unitName   String
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id])
  createTime DateTime @default(now())
  updateTime DateTime @default(now()) @updatedAt
}

model Collections {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  createTime DateTime @default(now())
  updateTime DateTime @default(now()) @updatedAt

  @@unique([userId, questionId])
}

model Attentions {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  createTime DateTime @default(now())
  updateTime DateTime @default(now()) @updatedAt

  @@unique([userId, questionId])
}
